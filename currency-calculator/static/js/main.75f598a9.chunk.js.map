{"version":3,"sources":["components/Currency.js","components/Loading.js","components/CurrencyCalculator.js","App.js","serviceWorker.js","index.js"],"names":["CurrencySoles","props","_props","symbol","data-testid","className","CurrencyDolars","Currency","type","onChange","value","placeholder","children","Loading","CurrencyCalculator","useState","soles","setSoles","dolars","setDolars","typeDolarsChange","setTypeDolarsChange","useEffect","changeMoneyTo","SOLES","quantity","Number","isNaN","trim","length","parseFloat","toFixed","DOLARS","calculate","typeChange","fnUpdateCurrency","e","newSolesValue","target","newDolarsValue","App","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAEaA,EAAgB,SAACC,GAC5B,IAAMC,EAAM,2BAAQD,GAAR,IAAeE,OAAQ,UACnC,OACE,kBAAC,EAAaD,EACZ,0BAAME,cAAY,UAAUC,UAAU,yBACpC,uBAAGA,UAAU,uBAMRC,EAAiB,SAACL,GAC7B,IAAMC,EAAM,2BAAQD,GAAR,IAAeE,OAAQ,QACnC,OACE,kBAAC,EAAaD,EACZ,0BAAME,cAAY,UAAUC,UAAU,yBACpC,uBAAGA,UAAU,0BAMfE,EAAW,SAACN,GAChB,OACE,kBAAC,WAAD,KACE,yBAAKI,UAAU,SACb,yBAAKA,UAAU,0BACb,2BACEA,UAAU,iBACVG,KAAK,OACLC,SAAUR,EAAMQ,SAChBC,MAAOT,EAAMS,MACbC,YAAaV,EAAME,SAEpBF,EAAMW,aC1BFC,EARC,WACd,OACE,yBAAKR,UAAU,WACb,uBAAGA,UAAU,sBCuEJS,EAtEmB,WAAO,IAAD,EACZC,mBAAS,IADG,mBAC/BC,EAD+B,KACxBC,EADwB,OAEVF,mBAAS,IAFC,mBAE/BG,EAF+B,KAEvBC,EAFuB,OAGUJ,mBAAS,IAHnB,mBAG/BK,EAH+B,KAGbC,EAHa,KAKtCC,qBAAU,WACRD,EARmC,OASlC,CAACD,IAEJ,IAYMG,EAAgB,CACpBC,MAb0B,SAACC,GAC3B,OAAIC,OAAOC,MAAMF,IAAwC,IAA3BA,EAASG,OAAOC,OACrC,GACFH,OAAOI,WAAWL,EAAWL,GAAkBW,QAAQ,IAW9DC,OAR0B,SAACP,GAC3B,OAAIC,OAAOC,MAAMF,IAAwC,IAA3BA,EAASG,OAAOC,OACrC,GACFH,OAAOI,WAAWL,EAAWL,GAAkBW,QAAQ,KAoB1DE,EAAY,SAACC,EAAYT,EAAUU,GAEvCA,EADkBZ,EAAcW,GAAYT,KAI9C,OACE,kBAAC,WAAD,KACE,yBAAKpB,UAAU,qBACb,yBAAKA,UAAU,8CACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,CACEK,MAAOM,EACPP,SA1BU,SAAC2B,GACzB,IAAMC,EAAgBD,EAAEE,OAAO5B,MAC/BO,EAASmB,EAAEE,OAAO5B,OAClBuB,EAAU,SAAUI,EAAelB,MAyBvB,kBAAC,EAAD,CACET,MAAOQ,EACPT,SAxBW,SAAC2B,GAC1B,IAAMG,EAAiBH,EAAEE,OAAO5B,MAChCS,EAAUoB,GACVN,EAAU,QAASM,EAAgBtB,OAwBzB,yBAAKZ,UAAU,UACb,kBAAC,EAAD,aCxCDmC,MAtBf,WACE,OACE,yBAAKnC,UAAU,aACb,yBACEA,UAAU,SACVoC,KAAK,aACLC,aAAW,mBAEX,yBAAKrC,UAAU,gBACb,0BAAMA,UAAU,eAAhB,kBAGJ,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,SAAd,yBAGJ,kBAAC,EAAD,QCTcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.75f598a9.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nexport const CurrencySoles = (props) => {\n  const _props = { ...props, symbol: 'SOLES' };\n  return (\n    <Currency {..._props}>\n      <span data-testid='qa-icon' className='icon is-small is-left'>\n        <i className='fab fa-stripe-s'></i>\n      </span>\n    </Currency>\n  );\n};\n\nexport const CurrencyDolars = (props) => {\n  const _props = { ...props, symbol: 'USD' };\n  return (\n    <Currency {..._props}>\n      <span data-testid='qa-icon' className='icon is-small is-left'>\n        <i className='fas fa-dollar-sign'></i>\n      </span>\n    </Currency>\n  );\n};\n\nconst Currency = (props) => {\n  return (\n    <Fragment>\n      <div className='field'>\n        <div className='control has-icons-left'>\n          <input\n            className='input is-large'\n            type='text'\n            onChange={props.onChange}\n            value={props.value}\n            placeholder={props.symbol}\n          />\n          {props.children}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Currency;\n","import React from 'react';\n\nconst Loading = () => {\n  return (\n    <div className='loading'>\n      <i className='fas fa-sync-alt'></i>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { CurrencySoles, CurrencyDolars } from './Currency';\nimport Loading from './Loading';\n\nexport const DEFAULT_TYPE_USD_CHANGE = 3.4;\n\nexport const CurrencyCalculator = () => {\n  const [soles, setSoles] = useState('');\n  const [dolars, setDolars] = useState('');\n  const [typeDolarsChange, setTypeDolarsChange] = useState('');\n\n  useEffect(() => {\n    setTypeDolarsChange(DEFAULT_TYPE_USD_CHANGE);\n  }, [typeDolarsChange]);\n\n  const changeDolarsToSoles = (quantity) => {\n    if (Number.isNaN(quantity) || quantity.trim().length === 0)\n      return '';\n    return Number.parseFloat(quantity * typeDolarsChange).toFixed(2);\n  };\n\n  const changeSolesToDolars = (quantity) => {\n    if (Number.isNaN(quantity) || quantity.trim().length === 0)\n      return '';\n    return Number.parseFloat(quantity / typeDolarsChange).toFixed(2);\n  };\n\n  const changeMoneyTo = {\n    SOLES: changeDolarsToSoles,\n    DOLARS: changeSolesToDolars,\n  };\n\n  const handleSolesChange = (e) => {\n    const newSolesValue = e.target.value;\n    setSoles(e.target.value);\n    calculate('DOLARS', newSolesValue, setDolars);\n  };\n\n  const handleDolarsChange = (e) => {\n    const newDolarsValue = e.target.value;\n    setDolars(newDolarsValue);\n    calculate('SOLES', newDolarsValue, setSoles);\n  };\n\n  const calculate = (typeChange, quantity, fnUpdateCurrency) => {\n    const newChange = changeMoneyTo[typeChange](quantity);\n    fnUpdateCurrency(newChange);\n  };\n\n  return (\n    <Fragment>\n      <div className='columns is-mobile'>\n        <div className='column is-three-fifths is-offset-one-fifth'>\n          <div className='box mt-6 py-5 has-background-link-light'>\n            <div className='columns'>\n              <div className='column is-three-quarters'>\n                <CurrencySoles\n                  value={soles}\n                  onChange={handleSolesChange}\n                />\n                <CurrencyDolars\n                  value={dolars}\n                  onChange={handleDolarsChange}\n                />\n              </div>\n              <div className='column'>\n                <Loading />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default CurrencyCalculator;\n","import React from 'react';\nimport './App.css';\nimport CurrencyCalculator from './components/CurrencyCalculator';\n\nfunction App() {\n  return (\n    <div className='container'>\n      <nav\n        className='navbar'\n        role='navigation'\n        aria-label='main navigation'\n      >\n        <div className='navbar-brand'>\n          <span className='navbar-item'>Currency App</span>\n        </div>\n      </nav>\n      <div className='hero is-primary'>\n        <div className='hero-body container'>\n          <h4 className='title'>Currency Calculator</h4>\n        </div>\n      </div>\n      <CurrencyCalculator></CurrencyCalculator>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}